-------------------作品概要-------------------

作品名　　　　　：「SPIN LAMB!」
ジャンル　　　　： 3D押し出しアクションゲーム
プレイ人数　　　： 1人～2人
使用エンジン　　： 学校で使用したゲームエンジン
開発環境　　　　： VisualStudio2022,DirectX11
必要ライブラリ　： FBX SDK
作品リンク　　　： https://github.com/w4145n784q0/SpinLamb
制作期間　　　　： 9か月
動作環境　　　　： PC
制作人数　　　　： 1名(個人製作)


●ゲーム内容：
四方を柵に囲まれたフィールドを転がりながら、互いに衝突し合い、柵に接触させる3Dアクションゲームです。
相手を柵に衝突させると自分にポイントが1点入り、制限時間内にポイントを多く取った方が勝利となります。

●操作方法：

・キーボードの場合
矢印キー　　　　　　　　　　：移動
ＳＰＡＣＥキー　　　　　　　：ジャンプ
ＳＨＩＦＴキー長押し　　　　：チャージ
ＳＨＩＦＴキーを離す　　　　：ダッシュ攻撃
チャージ中にＳＰＡＣＥキー　：チャージ状態を解除
ＷＡＳＤキー　　　　　　　　：カメラ移動
Ｚキー　　　　　　　　　　　：カメラリセット
ＥＳＣキー　　　　　　　　　：ポーズ画面を開く

・XBOXコントローラーの場合
右スティック　　　　　　　　：移動
Ａボタン　　　　　　　　　　：ジャンプ
Ｂボタン長押し　　　　　　　：チャージ
Ｂボタンを離す　　　　　　　：ダッシュ攻撃
チャージ中にＡボタン　　　　：チャージ状態を解除
左スティック　　　　　　　　：カメラ移動
Ｘ・Ｙボタン　　　　　　　　：カメラリセット
ＳＴＡＲＴボタン　　　　　　：ポーズ画面を開く
　
●コンセプト：
一言で言うと「短時間かつシンプル操作で遊べるアクションゲーム」

過去のチーム制作で課題として挙がった「初見だと何をすればいいのかわかりにくい」「操作が難しい」「リプレイ性が低い」といった反省を活かすため、
「短時間でも面白さが伝わるようにすること」を意識し、このゲームを制作しました。

●設計面のコンセプト（ゲームデザイン）

①目的の明確化
「相手を場外にぶつける」というシンプルな勝利条件に絞りました。

②視覚的なフィードバックの強化
周囲を鋭い棘の柵で囲み、「ここに触れたらアウト」と直感的に理解できる環境をデザインしました。

③シンプル操作・短時間設計
過去の課題（操作が難しい、リプレイ性が低い）を踏まえ、遊ぶ方がすぐに目的を理解し、短い時間でも遊び切れるように工夫しました。

④操作の簡易化
主な操作を「パワーを溜めて相手に突進する」「相手に向かって移動」とし、操作方法を簡潔に説明できるようにしました。


●アプリ面のコンセプト（UI/UX・機能）

①導入のわかりやすさ
ゲーム開始前に簡易的な説明を表示し、ルールや操作方法をすぐ理解できるようにしました。

②遊び方確認機能
ゲーム前に操作やルールを確認できる機能や、実際にキャラクターを動かし動作を確かめられる練習モードを実装し、初めて遊ぶ方でも迷わず遊べるようにしました。

③改善ポイントの反映
「わかりにくさ」をアプリUI（説明画面や遊び方確認）でサポートし、ゲームの理解へのコストを下げました。

④直感的な操作の実現
あらゆる操作を一回のボタン入力で処理できるようにし、遊ぶ方が自然に手に馴染むような操作感を実現しました。

●技術面アピールポイント

①共通の基底クラスによる汎化

自身が動かすPlayerクラスと、CPUの処理を行うEnemyクラスには共通する処理や変数が多く、コードが複雑になっていました。
そこで、共通部分をCharacterクラスにまとめ、PlayerとEnemyはCharacterを継承するようにしました。
これにより、PlayerとEnemyクラスではそれぞれ特有の処理だけを担当するようになり、コードの整理と保守性の向上につながりました。

②ステージ管理クラス実装による処理と情報保持の分離

最初は、柵や地面などの各クラスがそれぞれ個別に情報を持っていて、拡張や管理がしにくい状態でした。
そこで、ステージ全体をまとめて管理するStageManagerクラスを作成しました。
このクラスは、各モデルの座標・回転・拡大率などの情報をCSVファイルから読み込んで管理し、それぞれのモデルクラスに必要な情報だけを渡すようにしました。
その結果、各クラスの役割を最小限に分担でき、コードの拡張性や保守性が向上しました。

③各プレイシーンと描画クラス・計算クラスの責務分離

UIに関する処理と描画の責務が混在し、役割が不明瞭になる問題があったため、
描画処理をHUDクラスに集約し、時間計測やマップ情報の計算はGameTimerクラスおよびMiniMapクラスに分離しました。
さらに、BattleSceneやPracticeSceneから描画指示を行う構成とすることで、各クラスの責務を明確化し、保守性と可読性を向上させました。

④オブザーバーパターンによるスコア管理

当初は、相手が柵に接触した際のスコア変動処理をBattleSceneのポインタ経由で直接呼び出しており、クラス間の結合度が高い設計となっていました。
そこで、スコア変動処理にオブザーバーパターンを適用し、被観察者であるPlayerやEnemyが柵への接触を通知し、観察者であるBattleSceneがその通知を受けてスコアの増減を処理する仕組みに変更いたしました。
これにより、クラス間の結合度が低減されるとともに、スコア計算を行わないPracticeSceneにおいても同様の通知処理を活用できるようになり、システムの柔軟性および拡張性が向上しました。

⑤画面分割の実装および二人プレイの実現

5月末にゲーム業界の方にテストプレイしていただいた際に、
「複数人で遊べるともっと楽しそう」というフィードバックをいただきました。
そこで、複数のビューポートを扱える構造に変更し、シーンからの指示や描画対象に応じて画面分割を切り替えられるように設計しました。
その結果、2人同時プレイが可能となり、ゲーム体験の幅が広がりました。

⑥視認性向上のための簡易オブジェクト設置

先生方から「ステージが殺風景で、空間の把握がしづらい」というご指摘を受け、
ステージの前後左右に簡易的なオブジェクトを配置しました。
これにより、キャラクターの相対位置が視覚的に把握しやすくなり、ゲームの操作性と遊びやすさの向上につながりました。
